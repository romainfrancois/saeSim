% Generated by roxygen2 (4.0.1): do not edit by hand
\name{sim_gen}
\alias{sim_gen}
\alias{sim_gen_e}
\alias{sim_gen_ec}
\alias{sim_gen_fe}
\alias{sim_gen_re}
\alias{sim_gen_rec}
\title{Generation component}
\usage{
sim_gen(simSetup, generator, nCont = NULL, level = NULL, fixed = NULL)

sim_gen_fe(simSetup, generator = gen_norm(0, 4, name = "x"))

sim_gen_e(simSetup, generator = gen_norm(0, 4, name = "e"))

sim_gen_ec(simSetup, generator = gen_norm(mean = 0, sd = 150, name = "e"),
  nCont = 0.05, level = "unit", fixed = TRUE)

sim_gen_re(simSetup, generator = gen_v_norm(name = "v"))

sim_gen_rec(simSetup, generator = gen_v_norm(mean = 0, sd = 40, name = "v"),
  nCont = 0.05, level = "area", fixed = TRUE)
}
\arguments{
\item{generator}{generator function used to generate random numbers.}

\item{name}{variable name used in the resulting \code{data.frame}.}

\item{level}{"unit", "area" or "none" - is the whole area contaminated, units inside an area or random observations in the data.}

\item{nCont}{gives the number of contaminated observations. Values between 0 and 1 will be trated as proportion. If length is larger 1, the expected length is the number of domains, you can specify something else in each domain. Integers are expected in that cas - numeric will be converted to integer.}

\item{fixed}{TRUE fixes the observations which will be contaminated. FALSE will result in a random selection of contaminated observations. Default is NULL for non-contaminated scenarios.}
}
\description{
One of the components which can be added to a simulation set-up. \code{sim_gen} is the generic interface to add components for data from some generator. Everything else are preconfigured wrapper functions of \code{sim_gen}.
}
\details{
\code{fe}: fixed-effect component; \code{e}: model-error; \code{ec}: contaminated model error; \code{re}: random-effect (error constant for each domain); \code{rec} contaminated random-effect. Note that for contamination you are expected to add both, a non-contaminated component and a contaminated component. They are simply added up in the response \code{y}.

Potentially you can define a \code{generator} yourself. Take care that it has three arguments, named \code{nDomains}, \code{nUnits} and \code{name}, and returns a \code{data.frame} with the variables \code{idD}, \code{idU} and one named with \code{name}. Use \code{make_id} to stay in the correct format.
}
\examples{
# Data setup for a mixed model
sim_base() \%>\% sim_gen_fe() \%>\% sim_gen_re() \%>\% sim_gen_e()
# Adding contamination in the model error
sim_base() \%>\% sim_gen_fe() \%>\% sim_gen_re() \%>\% sim_gen_e() \%>\% sim_gen_ec()

# Simple user defined generator:
gen_myVar <- function(nDomains, nUnits, name) {
  dat <- make_id(nDomains, nUnits)
  dat[name] <- rnorm(nrow(dat))
  dat
}

sim_base() \%>\% sim_gen_fe() \%>\% sim_gen_e(gen_myVar)
}
\seealso{
\code{\link{gen_norm}}, \code{\link{gen_v_norm}}, \code{\link{gen_v_sar}}, \code{\link{sim_agg}}, \code{\link{sim_calc}}, \code{\link{sim_sample}}
}

